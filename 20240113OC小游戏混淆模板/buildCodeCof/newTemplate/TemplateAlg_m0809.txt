@buildbubbleSort@Begin

//int array[10] = {24, 17, 85, 13, 9, 54, 76, 45, 5, 63};
//1@
void @funcname@(int @argval1@, int @argval2@)//2@
{
    int num = sizeof(@argval1@)/sizeof(int);
    num = @argval2@;
    for(int i = 0; i < num-1; i++) {

        for(int j = 0; j < num - 1 - i; j++) {
            if(@argval1@ < @argval2@) {
                int tmp = @argval1@;
                @argval2@ = tmp;
            }
        }
    }
}    
@buildbubbleSort@End

@buildbubbleSort111111@Begin
[TestTestAA testabc];
@buildbubbleSort111111@End

@buildselectionSort@Begin
//1@
void @funcname@(int @argval1@,int @argval2@)//2@
{
    int i, j, index;
    for(i = 0; i < @argval2@ - 1; i++) {
        index = i;
        for(j = i + 1; j < @argval2@; j++) {
            if(@argval1@ > @argval1@) {
                index = j;
            }

        }

        if(index != i) {
            int temp = @argval1@;
            @argval1@ = index;
            @argval1@ = temp;
        }
    }
}

@buildselectionSort@End


@buildInsertionSort@Begin

-(void)insertionSort{
    NSMutableArray *array = [NSMutableArray arrayWithArray:@[@3,@44,@38,@5,@47,@15,@36,@26,@27,@2,@46,@4,@19,@50,@49]];
    int sortBeginIndex = 1;//开始对比下标
    do {
        NSInteger sortBeginNum = [array[sortBeginIndex] integerValue];
        [array removeObjectAtIndex:sortBeginIndex];
        for (int i = sortBeginIndex -1; i >= 0; i--) {
            NSInteger compareNum = [array[i] integerValue];
            if (compareNum < sortBeginNum) {
                [array insertObject:[NSNumber numberWithInteger:sortBeginNum] atIndex:i+1];
                break;
            }else{
                if (i==0) {
                    [array insertObject:[NSNumber numberWithInteger:sortBeginNum] atIndex:0];
                }
            }
        }
        sortBeginIndex ++;
    } while (sortBeginIndex < array.count);
    NSLog(@"插入排序:%@",array);
}

@buildInsertionSort@End


@buildQuickSort@Begin
//1@
void @funcname@(int @argval1@, int @argval2@, int @argval3@) //2@
{
        int *a = @argval1@;
        int left = @argval2@;
        int right = @argval3@;
        if(left >= right) {
            return ;
        }

        int i = left;
        int j = right;
        int key = a[left];

        while (i < j) {

            while (i < j && key >= a[j]) {
                j--;
            }
            a[i] = a[j];
            while (i < j && key <= a[i]) {
                i++;
            }
            a[j] = a[i];

        }

        a[i] = key;
        @funcname@(a, left, i-1);
        @funcname@(a, i+1, right);

}

@buildQuickSort@End


@buildMergeSort@Begin
//1@
void @funcname@(int @argval1@[], int @argval2@[], int @argval3@, int @argval4@, int @argval5@) //2@
{
    int i = @argval3@;
    int j = @argval4@ + 1;
    int k = @argval3@;
    while (i != @argval4@ + 1 && j != @argval5@ + 1) {
        if (@argval1@[i] >= @argval1@[j]) {
            @argval2@[k++] = @argval1@[j++];
        } else {
            @argval2@[k++] = @argval1@[i++];
        }
    }

    while (i != @argval4@ + 1) {
        @argval2@[k++] = @argval1@[i++];
    }

    while (j != @argval5@ + 1) {
        @argval2@[k++] = @argval1@[j++];
    }

    for (i = @argval3@; i <= @argval5@; i++) {
        @argval1@[i] = @argval2@[i];
    }
}
//3@
void @funcname2@(int @argval1@[], int @argval2@[], int @argval3@, int @argval4@) //4@
{
    int midIndex;
    if (@argval3@ < @argval4@) {
        midIndex = (@argval3@ + @argval4@) / 2;
        @funcname2@(@argval1@, @argval2@, @argval3@, midIndex);
        @funcname2@(@argval1@, @argval2@, midIndex + 1, @argval4@);
        @funcname@(@argval1@, @argval2@, @argval3@, midIndex, @argval4@);
    }
}

@buildMergeSort@End

@buildBsearchWithourRec@Begin
//1@
void @funcname@(int @argval1@,int @argval2@,int @argval3@,int @argval4@)//2@
{
    while(@argval2@ <= @argval3@) {
        int mid = (@argval2@ + @argval3@) / 2;
        if(@argval1@ > @argval4@)
             @argval3@ = mid - 1;
        else if(@argval1@ < @argval4@)
            @argval2@ = mid + 1;
        else    //findthetarget
            return mid;
    }
    //the array does not contain the target
    //return -1;
}

@buildBsearchWithourRec@End

@buildBinarySearch@Begin
//1@
int @funcname@(const int @argval1@[],int @argval2@,int @argval3@,int @argval4@)//2@
{
    int low=@argval2@;
    int high = @argval3@;
    int key = @argval4@;
    int mid=low + (high - low) / 2;
    if(low > high)
        return -1;
    else{
        if(@argval1@[mid] == key)
            return mid;
    else if(@argval1@[mid] > key)
        return @funcname@(@argval1@, low, mid-1, key);
    else
        return @funcname@(@argval1@, mid+1, high, key);
    }
}

@buildBinarySearch@End

@buildSpliterFunc@Begin
//1@
int spliterFunc(char *p) //2@
{
    char c[100][100];
    int i = 0;
    int j = 0;

    while (*p != '\0') {
        if (*p == ' ') {
            i++;
            j = 0;
        } else {
            c[i][j] = *p;
            j++;
        }
        p++;
    }

    for (int k = i; k >= 0; k--) {
        printf("%s", c[k]);
        if (k > 0) {
            printf(" ");
        } else {
            printf("\n");
        }
    }
    return 0;
}

@buildSpliterFunc@End

@buildCompareDifferentStr@Begin
//1@
char *strOutPut(char *s) //2@
{

    char str[100];
    char *p = s;
    int index = 0;
    while (*s != '\0') {
        if (compareDifferentChar(*s, p) == 1) {
            str[index] = *s;
            index++;
        }
        s++;
    }
    return &str;

}
//3@
int compareDifferentChar(char c, char *s) //4@
{

    int i = 0;
    while (*s != '\0' && i<= 1) {
        if (*s == c) {
            i++;
        }
        s++;
    }

    if (i == 1) {
        return 1;
    } else {
        return 0;
    }

}

@buildCompareDifferentStr@End


@buildGcdFunc@Begin
//1@
int gcd(int a, int b) //2@
{
    int temp = 0;
    if (a < b) {
        temp = a;
        a = b;
        b = temp;
    }
    while (b != 0) {
        temp = a % b;
        a = b;
        b = temp;
    }
    return a;
}

@buildGcdFunc@End